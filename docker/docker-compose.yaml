include:
  - docker-compose-dev-essentials.yaml

networks:
  unstract-network:
    name: unstract-network

services:
  # Backend service
  backend:
    image: unstract/backend:${VERSION}
    container_name: unstract-backend
    restart: unless-stopped
    command: --migrate
    ports:
      - "8000:8000"
    env_file:
      - ../backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      reverse-proxy:
        condition: service_started
      minio:
        condition: service_started
      createbuckets:
        condition: service_completed_successfully
      platform-service:
        condition: service_started
      prompt-service:
        condition: service_started
      x2text-service:
        condition: service_started
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-backend
      - DJANGO_SETTINGS_MODULE=backend.settings
      - PYTHONUNBUFFERED=1
      - DJANGO_DEBUG=True
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`frontend.unstract.localhost`) && PathPrefix(`/api/v1`, `/deployment`)
      - traefik.http.services.backend.loadbalancer.server.port=8000
      - traefik.http.middlewares.backend-strip.stripprefix.prefixes=/api/v1
      - traefik.http.routers.backend.middlewares=backend-strip
      - traefik.http.routers.backend.entrypoints=web
      - traefik.http.services.backend.loadbalancer.server.scheme=http
    networks:
      - unstract-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Celery default worker
  worker:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery --autoscale=${WORKER_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-worker
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    networks:
      - unstract-network


  # Celery worker for managing logs and periodic tasks
  worker-logging:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-logging
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery_periodic_logs,celery_log_task_queue --autoscale=${WORKER_LOGGING_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-worker-logging
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    networks:
      - unstract-network

  # Celery worker for handling API deployment tasks
  worker-api-deployment:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-api-deployment
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery_api_deployments --autoscale=${WORKER_API_DEPLOYMENTS_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-worker-api-deployment
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    networks:
      - unstract-network

  # Celery worker for handling file processing tasks
  worker-file-processing:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-file-processing
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing worker --loglevel=info -Q file_processing --autoscale=${WORKER_FILE_PROCESSING_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-worker-file-processing
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    networks:
      - unstract-network


  # Celery worker for handling API file processing tasks
  worker-api-file-processing:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-api-file-processing
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing worker --loglevel=info -Q api_file_processing --autoscale=${WORKER_API_FILE_PROCESSING_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-worker-api-file-processing
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - tool_registry_config:/data/tool_registry_config
    networks:
      - unstract-network

  # Celery Flower
  celery-flower:
    image: unstract/backend:${VERSION}
    container_name: unstract-celery-flower
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend flower --port=5555 --purge_offline_workers=5"
    env_file:
      - ../backend/.env
    depends_on:
      - worker
      - worker-logging
      - worker-api-deployment
      - redis
    labels:
      - traefik.enable=false
    ports:
      - "5555:5555"
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-celery-flower
    volumes:
      - unstract_data:/data
    profiles:
      - optional
    networks:
      - unstract-network

  # Celery Beat
  celery-beat:
    image: unstract/backend:${VERSION}
    container_name: unstract-celery-beat
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend beat --scheduler django_celery_beat.schedulers:DatabaseScheduler -l INFO"
    env_file:
      - ../backend/.env
      - ./essentials.env
    depends_on:
        - db
        - redis
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-celery-beat
    networks:
      - unstract-network

  # Frontend React app
  frontend:
    image: unstract/frontend:${VERSION}
    container_name: unstract-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - reverse-proxy
    environment:
      - ENVIRONMENT=development
      - APPLICATION_NAME=unstract-frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
      - nginx_temp:/var/lib/nginx
    command: >
      sh -c "mkdir -p /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp /var/cache/nginx/scgi_temp &&
             chown -R nginx:nginx /var/cache/nginx /var/lib/nginx &&
             nginx -g 'daemon off;'"
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`frontend.unstract.localhost`)
      - traefik.http.services.frontend.loadbalancer.server.port=3000
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.http.services.frontend.loadbalancer.server.scheme=http
    networks:
      - unstract-network

  platform-service:
    image: unstract/platform-service:${VERSION}
    container_name: unstract-platform-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ../platform-service/.env
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=false
    networks:
      - unstract-network

  prompt-service:
    image: unstract/prompt-service:${VERSION}
    container_name: unstract-prompt-service
    restart: unless-stopped
    depends_on:
      - db
      - minio
      - createbuckets
    ports:
      - "3003:3003"
    env_file:
      - ../prompt-service/.env
    labels:
      - traefik.enable=false
    extra_hosts:
      # "host-gateway" is a special string that translates to host docker0 i/f IP.
      - "host.docker.internal:host-gateway"
    networks:
      - unstract-network

  x2text-service:
    image: unstract/x2text-service:${VERSION}
    container_name: unstract-x2text-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    env_file:
      - ../x2text-service/.env
    depends_on:
      - db
    labels:
      - traefik.enable=false
    networks:
      - unstract-network

  runner:
    image: unstract/runner:${VERSION}
    container_name: unstract-runner
    restart: unless-stopped
    ports:
      - 5002:5002
    env_file:
      - ../runner/.env
    volumes:
      - ./workflow_data:/data
      # Docker socket bind mount to spawn tool containers
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
    labels:
      - traefik.enable=false
    networks:
      - unstract-network

volumes:
  prompt_studio_data:
  unstract_data:
  tool_registry_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/../tool-registry/tool_registry_config
  nginx_cache:
  nginx_temp:
